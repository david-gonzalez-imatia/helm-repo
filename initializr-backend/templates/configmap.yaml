apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  install_node.sh: |
    #!/bin/bash

    NODE_VERSION=12.20.0

    ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
      amd64) ARCH='x64';; \
      ppc64el) ARCH='ppc64le';; \
      s390x) ARCH='s390x';; \
      arm64) ARCH='arm64';; \
      armhf) ARCH='armv7l';; \
      i386) ARCH='x86';; \
      *) echo "unsupported architecture"; exit 1 ;; \
    esac \
    && set -ex \
    && apt-get update && apt-get install -y ca-certificates curl wget gnupg dirmngr xz-utils libatomic1 --no-install-recommends \
    && rm -rf /var/lib/apt/lists/* \
    && for key in \
      4ED778F539E3634C779C87C6D7062848A1AB005C \
      94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
      1C050899334244A8AF75E53792EF661D867B9DFA \
      71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
      8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
      C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
      C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \
      DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
      A48C2BEE680E841632CD4E44F07496B3EB3C1762 \
      108F52B48DB57BB0CC439B2997B01419BD92F80A \
      B9E2F5981AA6E0CD28160D9FF13993A75599653C \
    ; do \
      gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key" || \
      gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
      gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
    done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && grep " node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
    && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt \
    && apt-mark auto '.*' > /dev/null \
    && find /usr/local -type f -executable -exec ldd '{}' ';' \
      | awk '/=>/ { print $(NF-1) }' \
      | sort -u \
      | xargs -r dpkg-query --search \
      | cut -d: -f1 \
      | sort -u \
      | xargs -r apt-mark manual \
    && ln -s /usr/local/bin/node /usr/local/bin/nodejs \
    && node --version \
    && npm --version

    ## Install required packages to operate jx
    
    ### EKS
    
    # Install aws cli and authenticator
    #curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    #unzip awscliv2.zip
    #./aws/install
    # **************** Use secret and helm for credentials and configuration ***********
    ##aws --profile default configure set aws_access_key_id AKIASTZHO6DA3VITGQ35
    ##aws --profile default configure set aws_secret_access_key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    ##aws --profile default configure set region eu-west-1
    ##aws --profile default configure set output json
    #curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/aws-iam-authenticator
    #chmod +x aws-iam-authenticator
    #mv aws-iam-authenticator /usr/local/bin/aws-iam-authenticator    
    # Install kubectl
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x kubectl
    mv ./kubectl /usr/local/bin/kubectl
    #aws eks --region <region-code> update-kubeconfig --name <cluster_name>
    
    ### GKE
    
    # Install Google Cloud SDK
    curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-323.0.0-linux-x86_64.tar.gz
    tar xfz google-cloud-sdk-323.0.0-linux-x86_64.tar.gz -C /opt
    /opt/google-cloud-sdk/install.sh --usage-reporting false --rc-path ~/.bashrc --path-update true --command-completion true
    #gcloud components install kubectl -q
    # **************** Use secret and helm for credentials json file ***********
    source ~/.bashrc
    gcloud auth activate-service-account --key-file="/mnt/credentials/credentials-json"
    # **************** Use helm to set project ***********
    gcloud config set project $PROJECT
    gcloud container clusters get-credentials $CLUSTER --zone=$ZONE
    
    # Install jx
    curl -L "https://github.com/jenkins-x/jx/releases/download/$(curl --silent "https://github.com/jenkins-x/jx/releases/latest" | sed 's#.*tag/\(.*\)\".*#\1#')/jx-linux-amd64.tar.gz" | tar xzv "jx"
    mv jx /usr/local/bin
    
    # Config git
    git config --global user.email $EMAIL
    git config --global user.name $GIT_USER
    
    ## Copy generator sources
    # Get code with github api and curl
    #curl -L -H "Accept: application/vnd.github.v3+json" -u $USER:$TOKEN https://api.github.com/repos/$OWNER/$REPO/tarball/$REF --output $REPO.tar.gz
    #tar xpf $REPO.tar.gz
    # Get code with git
    cd
    git clone https://oauth2:$GENERATORREPO_PASSWORD@github.com/{{ .Values.codeRepositories.generatorRepo.owner }}/{{ .Values.codeRepositories.generatorRepo.name }}.git --branch {{ .Values.codeRepositories.generatorRepo.ref }}
    mv {{ .Values.codeRepositories.generatorRepo.name }} /generator-app
    cd /generator-app/generator-platform-initializr
    npm install
    npm link .
    # Required to avoid root execution Yeoman restriction
    sed -i -e '/rootCheck/d' '/generator-app/generator-platform-initializr/node_modules/yo/lib/cli.js'

    ## Copy templates
    cd
    if [ ! -d "/tmp/platform-initializr/{{ .Values.codeRepositories.templatesRepo.name }}/java" ]; then
      git clone https://oauth2:$TEMPLATESREPO_PASSWORD@github.com/{{ .Values.codeRepositories.templatesRepo.owner }}/{{ .Values.codeRepositories.templatesRepo.name }}.git --branch {{ .Values.codeRepositories.templatesRepo.ref }}
      shopt -s dotglob
      mv {{ .Values.codeRepositories.templatesRepo.name }}/* /tmp/platform-initializr/{{ .Values.codeRepositories.templatesRepo.name }}
      shopt -u dotglob
    else
      echo "Templates already present in persistent volume"
    fi
    ## Copy springboot sources and install dependencies
    # Get code with github api and curl
    #curl -L -H "Accept: application/vnd.github.v3+json" -u $USER:$TOKEN https://api.github.com/repos/$OWNER/$REPO/tarball/$REF --output $REPO.tar.gz
    #tar xpf $REPO.tar.gz
    # Get code with git
    cd
    git clone https://oauth2:$BACKENDREPO_PASSWORD@github.com/{{ .Values.codeRepositories.backendRepo.owner }}/{{ .Values.codeRepositories.backendRepo.name }}.git --branch {{ .Values.codeRepositories.backendRepo.ref }}
    mv {{ .Values.codeRepositories.backendRepo.name }} /backend-app
    cd /backend-app
    sed -i "s/<\/project>//" pom.xml
    echo -e "<repositories>\n<repository>\n<id>nexus</id>\n<url>{{ .Values.mavenRepository }}</url>\n</repository>\n</repositories>\n</project>" >> pom.xml
    mvn clean package
    mvn install
    java -jar /backend-app/target/appwsc-platforminitializr.jar --git-user=$GIT_USER --git-token=$GIT_TOKEN --git-organization=$GIT_ORGANIZATION
