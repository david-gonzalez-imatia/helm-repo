apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "initializr-backend.fullname" . }}
  labels:
{{ include "initializr-backend.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "initializr-backend.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "initializr-backend.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "initializr-backend.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: templates-volume
              mountPath: /tmp/platform-initializr/APPCLR-PlatformInitializr-templates/
            - name: install-node-sh
              mountPath: /docker-entrypoint.d/
            {{- if .Values.provider.gke }}
            - name: credentials-volume
              mountPath: /mnt/credentials/
            {{- end }}
          command:
            - bash
            - "-c"
            - |
              ./docker-entrypoint.d/install_node.sh
          env:
            - name: BACKENDREPO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.codeRepositories.backendRepo.secretName }}
                  key: username
            - name: BACKENDREPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.codeRepositories.backendRepo.secretName }}
                  key: password
            - name: GENERATORREPO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.codeRepositories.generatorRepo.secretName }}
                  key: username
            - name: GENERATORREPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.codeRepositories.generatorRepo.secretName }}
                  key: password
            - name: TEMPLATESREPO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.codeRepositories.templatesRepo.secretName }}
                  key: username
            - name: TEMPLATESREPO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.codeRepositories.templatesRepo.secretName }}
                  key: password
            - name: GIT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.tenantid }}-secret
                  key: git-token
            - name: DATABASE_SERVICE
              value: {{ .Release.Name }}-postgresql
            - name: GIT_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.tenantid }}
                  key: git-user
            - name: GIT_ORGANIZATION
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.tenantid }}
                  key: git-organization
            - name: EMAIL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.tenantid }}
                  key: email
            - name: PROJECT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.tenantid }}
                  key: project
            - name: ZONE
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.tenantid }}
                  key: zone
            - name: CLUSTER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.tenantid }}
                  key: cluster
            {{- if .Values.provider.gke }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/mnt/credentials/credentials-json"
            {{- end }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probePath }}
              port: http
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          startupProbe:
            httpGet:
              path: {{ .Values.probePath }}
              port: http
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: install-node-sh
          configMap:
            name: backend-config
            defaultMode: 0777
            items:
              - key: install_node.sh
                path: install_node.sh
        {{- if .Values.provider.gke }}
        - name: credentials-volume
          secret:
            secretName: {{ .Values.tenantid }}-secret
        {{- end }}
        - name: templates-volume
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "initializr-backend.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        #  persistentVolumeClaim:
        #    claimName: templates-volumeclaim
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  #volumeClaimTemplates:
  #  - metadata:
  #      name: templates-volumeclaim
  #    spec:
  #      accessModes: ["ReadWriteOnce"]
  #      resources:
  #        requests:
  #          storage: 10Mi
